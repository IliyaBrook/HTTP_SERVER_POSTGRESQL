package main

import (
	"fmt"
	"time"
)

var b int

func main() {
	// при запуске есть вероятность, что часть "Конкурентный" выполнится так как они ставятся в очередь
	// эта часть не выполнится, так как после блокировки на 1 секунду и последующей блокировки на 1 секунду внутри анонимной функции выполнение main закончится
	// если добавить + 1 секунду к time.Sleep(time.Second) к конце кода то print успеет отработать во внутри анонимной функции
	go func() {
		time.Sleep(time.Second)
		go fmt.Println("1.Конкурентный конкретный ниндзя с задержкой")
	}()
	go fmt.Println("2.Конкурентный конкретный ниндзя")
	go fmt.Println("3.Конкурентный конкретный ниндзя")

	// останавливает текущую go рутину как минимум на 1 секунду
	time.Sleep(time.Second)
	// или на одну миллисекунду
	//time.Sleep(time.Nanosecond)
	fmt.Println("Не конкретный ниндзя")
}

func createPtr() *int {
	a := 5
	return &a
}
